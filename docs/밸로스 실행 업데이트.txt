# VELOS 세부 실행 계획 (2025-08-12 기준)

## 1. 현재 진행 현황

✅ 완료 / ⚠ 미완성

### 1. 외부 메모리 기반 전환

* ✅ learning\_memory.json & learning\_summary.json 자동 생성·갱신 스크립트 구축 완료
* ✅ system\_health.json 상태 갱신 스크립트 구축 완료
* ⚠ 실시간 외부 메모리 업데이트·반영 루프 안정화 필요 (마스터 루프 통합, 동기화 오류 처리 강화)

### 2. 폴더 구조 및 데이터 정리

* ✅ 불필요 파일 일부 삭제 및 구조 단순화 완료
* ✅ 경로 고정(C:/giwanos) 완료
* ⚠ 자동 정리 루틴 및 백업 통합 미완료

### 3. 외부 API 연동 안정화

* ⚠ Slack 전송 오류 지속
* ⚠ 보고서 생성 후 자동 전송 루틴 불안정

### 4. 백업 및 무결성 검사

* ⚠ 무결성 검사 스케줄러 및 백업 자동화 미적용

### 5. 기능 검증

* ⚠ 보고서 생성·전송 및 마스터 루프 정상 작동 검증 중 오류 발생

---

## 2. 상세 실행 계획

### 2.1 설정 및 보안 (configs)

* `.env` 파일: Slack 토큰, DB DSN, Notion 토큰, 이메일 자격 설정
* 민감 정보 암호화 (`configs/security/encrypt_config.py`)
* `settings.yaml` 업데이트:

  ```yaml
  paths:
    memory_db: "C:/giwanos/data/memory/velos.db"
    memory_jsonl: "C:/giwanos/data/memory/learning_memory.jsonl"
    snapshots: "C:/giwanos/data/backups"
    reports: "C:/giwanos/data/reports"
    reflections: "C:/giwanos/data/reflections"
    logs: "C:/giwanos/data/logs"
  features:
    use_embeddings: false
    autosave: true
    integrity_guard: true
  ```

### 2.2 데이터 디렉터리 관리 (data)

* 폴더 생성: logs, reports, reflections, memory, backups
* `memory_adapter.py` 작성 → JSONL → SQLite 플러시
* 백업 스크립트 (`create_snapshot.py`) → 매일 새벽 1시 자동 실행 (PowerShell 스케줄러)

### 2.3 문서화 (docs)

* 설계 문서: 메모리 구조, 백업 전략, 자동화 스크립트 흐름 기록
* 운영 매뉴얼: 설치·실행·복구·오류 해결 절차 포함

### 2.4 인터페이스 (interface)

* 대시보드에 system\_health.json, 백업 상태, 로그 시각화
* 사용자 맞춤 설정 로직 개선

### 2.5 시스템 모듈 (modules)

* core: 메모리 어댑터, Slack/Notion/보고서 생성 함수 정리
* automation: 백업, 무결성 검사, 보고서 전송 스케줄링
* evaluation: 기능 및 성능 검증 스크립트
* advanced: 추후 고급 기능 확장 구조 준비

### 2.6 실행 스크립트 (scripts)

* `run_giwanos_master_loop.py`: 루프 시작 시 memory\_adapter 호출, 오류 로그 기록, 알림 전송
* `setup_giwanos_tasks.ps1`: 백업/검사/보고서 전송 예약 작업 등록

### 2.7 외부 연동 (tools)

* Slack/Email/Pushbullet 알림 통합, 재시도 로직 강화
* Notion API 업로드 기능

### 2.8 벡터 캐시 (vector\_cache)

* use\_embeddings=false → 갱신 중지
* 필요 시 벡터 검색 로직 추가

### 2.9 테스트 및 검증

* 단위·통합 테스트 작성
* 실패 시 data/logs에 기록 & 즉시 알림

---

## 3. 우선 실행 순서

1. memory\_adapter.py 작성 및 마스터 루프 통합
2. 백업·무결성 검사 스크립트 작성 및 스케줄러 등록
3. Slack 전송 오류 수정
4. 보고서 자동 전송 안정화


