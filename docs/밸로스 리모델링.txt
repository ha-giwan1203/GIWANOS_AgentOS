VELOS 세부 실행 계획 (2025-08-12 기준)
현재 진행 현황
현재 VELOS 시스템 리모델링의 진행 상황을 아래에 요약합니다. 체크 표시(✅)는 완료된 작업을, 경고 표시(⚠)는 미완성 또는 진행 중인 작업을 의미합니다.

1. 외부 메모리 기반 전환
✅ learning_memory.json과 learning_summary.json 자동 생성·갱신 스크립트 구축 완료

✅ system_health.json 상태 갱신 스크립트 구축 완료

⚠ 미완: 실시간 외부 메모리 업데이트 및 반영 루프의 안정화가 필요합니다. 마스터 루프와의 통합과 동기화 오류 처리 로직을 강화해야 합니다.

2. 폴더 구조 및 불필요 데이터 정리
✅ 불필요 파일 일부 삭제 및 폴더 구조 단순화 완료

✅ 최상위 경로를 고정하여 모듈과 스크립트에서 통일된 기준으로 사용하도록 했습니다

⚠ 미완: 자동화된 정리 루틴과 백업 통합 기능이 아직 구현되지 않았습니다. 정기적으로 불필요 파일을 제거하고 백업을 병합하는 스크립트가 필요합니다.

3. 외부 API 연동 안정화
⚠ 미완: Slack 전송 오류가 지속적으로 발생하고 있습니다. API 토큰과 채널 ID 검증, 재시도 로직을 개선해야 합니다.

⚠ 미완: 보고서 생성 후 자동 전송 루틴이 안정화되지 않았습니다. 오류 처리와 전송 스케줄링을 재검토해야 합니다.

4. 백업 및 무결성 검사
⚠ 미완: 무결성 검사 스케줄러와 백업 자동화가 아직 적용되지 않았습니다. 스크립트 작성과 예약 작업 등록이 요구됩니다.

5. 기능 검증
⚠ 진행 중: 보고서 생성·전송과 마스터 루프의 정상 작동을 검증하는 과정에서 오류가 발생하고 있습니다. 추가 테스트 케이스를 작성하여 원인을 파악해야 합니다.

위의 현황을 기반으로 아래에 제시된 상세 실행 계획을 순차적으로 수행하면 잔여 작업을 완료하고 전체 시스템의 안정성을 확보할 수 있습니다.

1. 설정 및 보안 (configs)
.env 파일 업데이트: Slack 토큰, 데이터베이스 DSN, Notion 토큰, 이메일 자격 등 외부 서비스 값을 정확히 입력한다.

민감 정보 암호화: configs/security/encrypt_config.py를 사용해 .env의 민감 정보를 암호화하고, 암호화 키(config.key)와 함께 관리한다.

settings.yaml 수정:

paths 섹션에 memory_db, memory_jsonl, snapshots, reports, reflections 경로를 현 구조(data/memory, data/backups, 등)에 맞게 지정한다.

features 섹션에서 use_embeddings=false, autosave=true, integrity_guard=true로 설정한다.

memory.flush_interval_sec 등 동기화 주기를 정의한다.

시스템 규칙 정의: system_config.json과 judgment_rules.json에 시스템 동작 규칙과 판정 기준을 상세히 정의한다.

2. 데이터 디렉터리 관리 (data)
폴더 생성 및 권한 설정: logs/, reports/, reflections/, memory/, backups/ 폴더를 확인하고 없으면 생성한다. 서비스 계정에 적절한 읽기/쓰기 권한을 부여한다.

메모리 시스템 구현: modules/core/memory_adapter.py를 작성해 JSONL 버퍼(learning_memory.jsonl)를 SQLite DB(velos.db)로 동기화한다.

새 기록은 JSONL에 우선 저장하고, flush 시 DB로 이동시킨다.

recent()과 search()로 키워드 검색과 최신 발화 목록을 제공한다.

백업 및 스냅샷: modules/automation/snapshots/create_snapshot.py를 구현한다.

매일 새벽 1시에 velos.db와 learning_memory.jsonl을 data/backups로 복사하는 작업을 scripts/setup_giwanos_tasks.ps1에 등록한다.

백업 파일은 주기적으로 GitHub Private Repo나 클라우드 스토리지에 업로드한다.

3. 문서화 및 매뉴얼 정비 (docs)
설계 문서 업데이트: docs/giwanos_agentos_final_architecture.md에 폴더 구조, 메모리 설계, 백업 전략, 자동화 스크립트 구조를 설명한다.

운영 매뉴얼 보강: docs/operation_manual.md에 설치·실행 절차, .env 설정법, 백업 및 복구 절차, Slack 오류 해결법 등을 단계별로 기술한다.

코드 문서화: docs/code_docs/에 주요 모듈(memory_adapter.py, run_giwanos_master_loop.py, auto_recovery_agent.py)의 함수 설명과 예제 코드를 추가한다.

4. 인터페이스 및 개인화 (interface)
대시보드 업데이트: interface/status_dashboard.py를 수정해 시스템 헬스(system_health.json), 로그(data/logs), 백업 상태(data/backups)를 시각화한다.

사용자 설정 추가: interface/user_personalization/user_personalization_model.py에 사용자별 설정(알림 채널, 자동 백업 여부, 폰트 옵션)을 추가한다.

폰트 확인: UI에 필요한 경우 fonts/Nanum_Gothic 폰트가 제대로 로드되는지 확인한다.

5. 시스템 모듈 개발 (modules)
core: 메모리 어댑터 외에 Slack/Notion 연동 함수, 보고서 생성 함수 등을 정리한다.

automation:

scheduling/에 백업, 무결성 검사, 보고서 생성, 알림 전송 등 스케줄링 작업을 정의한다.

git_management/에는 스냅샷 파일을 커밋·푸시하는 자동화 스크립트를 작성한다.

snapshots/는 백업 스크립트 로직을 담당한다.

evaluation: 기능 검증 및 성능 테스트 스크립트를 위치시켜 전체 기능이 정상적으로 동작하는지 주기적으로 확인한다.

advanced: 추후 고급 기능(예: 벡터 검색, LLM 확장)을 개발할 때 사용할 수 있도록 구조만 준비해 둔다.

6. 실행 스크립트 관리 (scripts)
run_giwanos_master_loop.py:

루프 시작 시 memory_adapter.flush_jsonl_to_db()를 호출한다.

응답 전 memory_adapter.recent()로 최신 N개의 발화를 불러와 시스템 프롬프트에 포함시킨다.

오류 발생 시 data/logs에 상세 로그를 기록하고, tools/notifications/system_alert_notifier.py로 알림을 보낸다.

setup_giwanos_tasks.ps1: 백업, 무결성 검사, 보고서 생성, 알림 전송 등의 예약 작업을 등록한다.

generate_decision_rules.py 및 generate_rag_decision_examples.py: 데이터/보고서 생성 후 data/reports에 저장하도록 수정한다.

auto_recovery_agent.py: 장애 발생 시 data/backups의 최신 스냅샷으로 복구하는 로직을 구현한다.

reflection_agent.py: 대화 요약과 자기 성찰 데이터를 data/reflections에 기록한다.

7. 외부 연동 및 유틸리티 (tools)
system_alert_notifier.py 수정: Slack, Email, Pushbullet 통합 알림을 지원하고 재시도 로직을 강화한다. .env에서 토큰과 채널 ID를 읽어 사용한다.

Notion 연동: notion_integration/에 Notion API를 사용해 보고서나 백업 요약을 업로드하는 모듈을 작성한다.

이메일 관리: email_management/에서 이메일 전송 설정을 구성하고, 주기적인 상태 보고를 발송한다.

챗봇 도구: 현재 프로젝트와 직접 관련 없는 도구는 비활성화하거나 고급 기능 개발 시점에 사용할 수 있도록 준비한다.

8. 벡터 캐시 관리 (vector_cache)
기본 설정에서 use_embeddings=false이므로 vector_cache의 파일은 자동으로 갱신하지 않는다.

추후 의미 검색이 필요해질 경우, 이 디렉터리와 modules/core에 임베딩 저장 및 검색 로직을 추가한다.

9. 테스트 및 검증
단위 테스트: 각 모듈 함수에 대한 테스트 케이스를 작성하여 동작 여부를 확인한다.

통합 테스트: Slack 전송, 보고서 생성, 메모리 저장·검색, 백업·복구, 알림 전송, 스케줄러 실행 등 전체 시나리오를 테스트한다.

문서 테스트: docs/operation_manual.md에 따라 설치 및 실행 절차를 따라가며 문제가 없는지 검증한다.

테스트 결과는 data/logs에 기록하고, 실패 시 알림을 전송한다.

10. 장기적 확장 계획
임베딩 도입: 의미 검색이 필요해질 경우 Pinecone, Weaviate 등의 벡터 DB를 연동하고 vector_cache를 활용한다.

멀티 유저 지원: 여러 사용자가 VELOS를 공유하는 경우, SQLite 대신 PostgreSQL이나 MongoDB와 같은 관리형 DB로 전환하고 사용자별 데이터 분리 로직을 구현한다.

하이브리드 아키텍처: 일부 작업은 로컬에서 처리하고, 백업과 보고서는 클라우드 저장소에 저장하는 하이브리드 구조를 도입한다.

지속적 문서화와 유지보수: 새 기능을 추가할 때마다 docs를 업데이트하고, 스크립트와 모듈에 주석을 추가하여 유지보수성을 높인다.

이 계획을 기반으로 각 디렉터리별 역할과 해야 할 일을 명확하게 나누어 실행하면 VELOS 시스템을 안정적으로 운영하고 확장할 수 있습니다.

