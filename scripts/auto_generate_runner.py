# =========================================================
# VELOS 운영 철학 선언문
# 1) 파일명 고정: 시스템 파일명·경로·구조는 고정, 임의 변경 금지
# 2) 자가 검증 필수: 수정/배포 전 자동·수동 테스트를 통과해야 함
# 3) 실행 결과 직접 테스트: 코드 제공 시 실행 결과를 동봉/기록
# 4) 저장 경로 고정: ROOT=C:/giwanos 기준, 우회/추측 경로 금지
# 5) 실패 기록·회고: 실패 로그를 남기고 후속 커밋/문서에 반영
# 6) 기억 반영: 작업/대화 맥락을 메모리에 저장하고 로딩에 사용
# 7) 구조 기반 판단: 프로젝트 구조 기준으로만 판단 (추측 금지)
# 8) 중복/오류 제거: 불필요/중복 로직 제거, 단일 진실원칙 유지
# 9) 지능형 처리: 자동 복구·경고 등 방어적 설계 우선
# 10) 거짓 코드 절대 불가: 실행 불가·미검증·허위 출력 일체 금지
# =========================================================
from __future__ import annotations
import os, json, time
from pathlib import Path

ROOT = Path(os.getenv("VELOS_ROOT", r"C:\giwanos")).resolve()
DATA = ROOT / "data"
REPORT_DIR = DATA / "reports" / "auto"
LOGS = DATA / "logs"
MEMDIR = DATA / "memory"

REPORT_DIR.mkdir(parents=True, exist_ok=True)
LOGS.mkdir(parents=True, exist_ok=True)
MEMDIR.mkdir(parents=True, exist_ok=True)

# 0) 최소 메모리 파일 보증
lm = MEMDIR / "learning_memory.json"
if not lm.exists():
    lm.write_text("[]", encoding="utf-8")

# 1) 타임스탬프 리포트 생성
ts = time.strftime("%Y%m%d_%H%M%S", time.localtime())
md = REPORT_DIR / f"velos_auto_note_{ts}.md"
md.write_text(
    f"# VELOS Auto Note\n\n- timestamp: {ts}\n- root: {ROOT}\n- hint: generated by auto_generate_runner\n",
    encoding="utf-8"
)

# 2) 인덱스 갱신
idx = REPORT_DIR / "auto_index.json"
data = {"latest": str(md), "updated_at": time.strftime("%Y-%m-%d %H:%M:%S"), "count": 0}
if idx.exists():
    try:
        old = json.loads(idx.read_text(encoding="utf-8"))
        data["count"] = int(old.get("count", 0)) + 1
    except Exception:
        data["count"] = 1
else:
    data["count"] = 1
idx.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")

# 3) 로그 추가
alog = LOGS / "auto_generate.log"
open(alog, "a", encoding="utf-8").write(f"[auto] {ts} -> {md.name}\n")
