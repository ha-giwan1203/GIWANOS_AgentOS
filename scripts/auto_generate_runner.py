from __future__ import annotations
import os, json, time
from pathlib import Path

ROOT = Path(os.getenv("VELOS_ROOT", r"C:\giwanos")).resolve()
DATA = ROOT / "data"
REPORT_DIR = DATA / "reports" / "auto"
LOGS = DATA / "logs"
MEMDIR = DATA / "memory"

REPORT_DIR.mkdir(parents=True, exist_ok=True)
LOGS.mkdir(parents=True, exist_ok=True)
MEMDIR.mkdir(parents=True, exist_ok=True)

# 0) 최소 메모리 파일 보증
lm = MEMDIR / "learning_memory.json"
if not lm.exists():
    lm.write_text("[]", encoding="utf-8")

# 1) 타임스탬프 리포트 생성
ts = time.strftime("%Y%m%d_%H%M%S", time.localtime())
md = REPORT_DIR / f"velos_auto_note_{ts}.md"
md.write_text(
    f"# VELOS Auto Note\n\n- timestamp: {ts}\n- root: {ROOT}\n- hint: generated by auto_generate_runner\n",
    encoding="utf-8"
)

# 2) 인덱스 갱신
idx = REPORT_DIR / "auto_index.json"
data = {"latest": str(md), "updated_at": time.strftime("%Y-%m-%d %H:%M:%S"), "count": 0}
if idx.exists():
    try:
        old = json.loads(idx.read_text(encoding="utf-8"))
        data["count"] = int(old.get("count", 0)) + 1
    except Exception:
        data["count"] = 1
else:
    data["count"] = 1
idx.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")

# 3) 로그 추가
alog = LOGS / "auto_generate.log"
open(alog, "a", encoding="utf-8").write(f"[auto] {ts} -> {md.name}\n")
