import sys
import os
sys.path.append(os.getenv("VELOS_ROOT", r"C:\giwanos"))
import json
import os
import sys
import datetime
import uuid

from modules.report_paths import ROOT
from modules.core.memory_adapter import create_memory_adapter

REPORT_DIR = os.path.join(ROOT, "data", "reports", "auto")
DISPATCH_DIR = os.path.join(ROOT, "data", "reports", "_dispatch")
os.makedirs(REPORT_DIR, exist_ok=True)
os.makedirs(DISPATCH_DIR, exist_ok=True)

def main():
    """VELOS 마스터 루프 메인 함수"""
    
    # 메모리 어댑터 초기화
    try:
        adapter = create_memory_adapter()
        print("[MASTER] 메모리 어댑터 초기화 완료")
    except Exception as e:
        print(f"[MASTER] 메모리 어댑터 초기화 실패: {e}")
        adapter = None
    
    # 메모리 동기화
    if adapter:
        try:
            # JSONL → JSON 동기화
            json_processed = adapter.flush_jsonl_to_json()
            if json_processed > 0:
                print(f"[MASTER] JSON 동기화 완료: {json_processed}개 레코드")
            
            # JSONL → DB 동기화
            db_processed = adapter.flush_jsonl_to_db()
            if db_processed > 0:
                print(f"[MASTER] DB 동기화 완료: {db_processed}개 레코드")
            
            # 메모리 통계 확인
            stats = adapter.get_stats()
            print(f"[MASTER] 메모리 통계: 버퍼={stats['buffer_size']}, DB={stats['db_records']}, JSON={stats['json_records']}")
            
        except Exception as e:
            print(f"[MASTER] 메모리 동기화 실패: {e}")
    
    ts = datetime.datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    report_md = os.path.join(REPORT_DIR, f"velos_auto_report_{ts}.md")

    # --- 실제 메모리 데이터를 기반으로 한 보고서 생성 ---
    memory_info = ""
    if adapter:
        try:
            recent_data = adapter.recent(limit=5)
            memory_info = f"- 최근 메모리: {len(recent_data)}개 항목\n"
            if recent_data:
                latest = recent_data[0]
                memory_info += f"- 최신 기록: {latest['timestamp']}\n"
        except Exception as e:
            memory_info = f"- 메모리 조회 실패: {e}\n"
    else:
        memory_info = "- 메모리 어댑터 없음\n"
    
    body = [
        f"# VELOS Auto Report ({ts} UTC)",
        "",
        "- System: OK",
        "- Logs: summarized",
        memory_info,
        "- Memory: synchronized",
        "",
        "_This file was generated by run_giwanos_master_loop.py_",
    ]
    
    with open(report_md, "w", encoding="utf-8") as f:
        f.write("\n".join(body))

    # --- 브릿지가 처리할 디스패치 티켓 생성 ---
    ticket = {
        "id": str(uuid.uuid4()),
        "created_utc": ts,
        "artifacts": [
            {"type": "markdown", "path": str(report_md), "title": f"VELOS Report {ts}"}
        ],
        # 원하는 채널을 true로: 추후 config로 외부화 가능
        "send": {
            "slack": True,
            "notion": True,
            "push": False,
            "email": False
        },
        "meta": {"source": "master", "note": "auto generated with memory sync"}
    }
    
    ticket_path = os.path.join(DISPATCH_DIR, f"dispatch_{ts}.json")
    with open(ticket_path, "w", encoding="utf-8") as f:
        json.dump(ticket, f, ensure_ascii=False, indent=2)

    print(f"[MASTER] Report -> {report_md}")
    print(f"[MASTER] Dispatch -> {ticket_path}")

if __name__ == "__main__":
    main()


