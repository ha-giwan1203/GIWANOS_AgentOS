import sys, os
sys.path.append(os.getenv("VELOS_ROOT", r"C:\giwanos"))
import json, os, sys, time, datetime, pathlib, uuid

from modules.report_paths import ROOT, P
REPORT_DIR = os.path.join(ROOT, "data", "reports", "auto")
DISPATCH_DIR = os.path.join(ROOT, "data", "reports", "_dispatch")
os.makedirs(REPORT_DIR, exist_ok=True)
os.makedirs(DISPATCH_DIR, exist_ok=True)

ts = datetime.datetime.utcnow().strftime("%Y%m%d_%H%M%S")
report_md = os.path.join(REPORT_DIR, f"velos_auto_report_{ts}.md")

# --- 샘플 보고서: 추후 실제 수집/요약 로직으로 교체 ---
body = [
  f"# VELOS Auto Report ({ts} UTC)",
  "",
  "- System: OK",
  "- Logs: summarized",
  "- Memory: updated",
  "",
  "_This file was generated by run_giwanos_master_loop.py_",
]
with open(report_md, "w", encoding="utf-8") as f:
  f.write("\n".join(body))

# --- 브릿지가 처리할 디스패치 티켓 생성 ---
ticket = {
  "id": str(uuid.uuid4()),
  "created_utc": ts,
  "artifacts": [
    {"type": "markdown", "path": str(report_md), "title": f"VELOS Report {ts}"}
  ],
  # 원하는 채널을 true로: 추후 config로 외부화 가능
  "send": {
    "slack": True,
    "notion": True,
    "push": False,
    "email": False
  },
  "meta": {"source": "master", "note": "auto generated"}
}
ticket_path = os.path.join(DISPATCH_DIR, f"dispatch_{ts}.json")
with open(ticket_path, "w", encoding="utf-8") as f:
  json.dump(ticket, f, ensure_ascii=False, indent=2)

print(f"[MASTER] Report -> {report_md}")
print(f"[MASTER] Dispatch -> {ticket_path}")


