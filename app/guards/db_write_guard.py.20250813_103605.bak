# VELOS DB Write Guard (authorizer)
import os, sqlite3

FORBIDDEN = os.getenv("VELOS_DB_WRITE_FORBIDDEN") == "1"
OK   = getattr(sqlite3, "SQLITE_OK", 0)
DENY = getattr(sqlite3, "SQLITE_DENY", 1)

# action codes
SQLITE_INSERT        = getattr(sqlite3, "SQLITE_INSERT", 18)
SQLITE_UPDATE        = getattr(sqlite3, "SQLITE_UPDATE", 23)
SQLITE_DELETE        = getattr(sqlite3, "SQLITE_DELETE", 9)
SQLITE_ALTER_TABLE   = getattr(sqlite3, "SQLITE_ALTER_TABLE", 26)
SQLITE_DROP_TABLE    = getattr(sqlite3, "SQLITE_DROP_TABLE", 13)
SQLITE_DROP_INDEX    = getattr(sqlite3, "SQLITE_DROP_INDEX", 11)
SQLITE_DROP_VIEW     = getattr(sqlite3, "SQLITE_DROP_VIEW", 15)
SQLITE_DROP_TRIGGER  = getattr(sqlite3, "SQLITE_DROP_TRIGGER", 17)

SQLITE_CREATE_TABLE  = getattr(sqlite3, "SQLITE_CREATE_TABLE", 2)
SQLITE_CREATE_INDEX  = getattr(sqlite3, "SQLITE_CREATE_INDEX", 1)
SQLITE_CREATE_VIEW   = getattr(sqlite3, "SQLITE_CREATE_VIEW", 3)
SQLITE_CREATE_TRIGGER= getattr(sqlite3, "SQLITE_CREATE_TRIGGER", 6)

BLOCK = {
    SQLITE_INSERT, SQLITE_UPDATE, SQLITE_DELETE,
    SQLITE_ALTER_TABLE, SQLITE_DROP_TABLE, SQLITE_DROP_INDEX,
    SQLITE_DROP_VIEW, SQLITE_DROP_TRIGGER
}
ALLOW_CREATE = {
    SQLITE_CREATE_TABLE, SQLITE_CREATE_INDEX, SQLITE_CREATE_VIEW, SQLITE_CREATE_TRIGGER
}
# CREATE 수행 시 내부적으로 sqlite_master/sqlite_sequence에 INSERT가 발생하므로 예외 허용
SYSTEM_TABLES = {"sqlite_master", "sqlite_sequence"}

def _authorizer(action, p1, p2, db_name, trigger_or_view):
    if not FORBIDDEN:
        return OK
    if action in ALLOW_CREATE:
        return OK
    if action in BLOCK:
        name = (p1 or "").strip().strip('"').lower()
        if name in SYSTEM_TABLES:
            return OK  # 시스템 카탈로그 DML은 허용 (CREATE 내부동작)
        return DENY
    return OK

_orig_connect = sqlite3.connect
def _guarded_connect(*args, **kwargs):
    con = _orig_connect(*args, **kwargs)
    try:
        con.set_authorizer(_authorizer)
    except Exception:
        pass
    return con

sqlite3.connect = _guarded_connect


