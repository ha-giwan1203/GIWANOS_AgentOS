# =============================================================================
# 🧠 VELOS 시스템 철학 선언문
# - 파일명 절대 변경 금지 · 모든 수정 후 자가 검증 필수 · 실행 결과 직접 테스트
# - 판단 → 실행 → 회고 → 전송 루프를 기록과 기억 위에서 굴린다.
# =============================================================================

from __future__ import annotations

import os
import json
from pathlib import Path
from typing import Optional
import requests

LOG_DIR = Path("C:/giwanos/data/logs")
LOG_DIR.mkdir(parents=True, exist_ok=True)
LOG_FILE = LOG_DIR / "notify_pushbullet.log"

def _mask(v: Optional[str]) -> str:
    if not v:
        return "***"
    return (v[:3] + "***" + v[-3:]) if len(v) > 6 else "***"

def _log(obj: dict) -> None:
    try:
        with LOG_FILE.open("a", encoding="utf-8") as f:
            f.write(json.dumps(obj, ensure_ascii=False) + "\n")
    except Exception:
        pass

def _get_token() -> Optional[str]:
    # venv 환경변수 우선. 이름 혼용 대응
    return os.environ.get("PUSHBULLET_TOKEN") or os.environ.get("PUSHBULLET_API_KEY")

def send_pushbullet_notification(title: str, body: str) -> bool:
    token = _get_token()
    # 절대 전체 토큰 로그 금지. 마스킹만.
    _log({"stage": "init", "token_present": bool(token), "token_mask": _mask(token)})

    if not token:
        _log({"ok": False, "reason": "missing_token"})
        print("❌ Pushbullet 토큰이 없습니다.")
        return False

    url = "https://api.pushbullet.com/v2/pushes"
    headers = {
        "Access-Token": token,
        "Content-Type": "application/json"
    }
    data = {
        "type": "note",
        "title": title,
        "body": body
    }

    try:
        r = requests.post(url, headers=headers, json=data, timeout=10)
        ok = (r.status_code == 200)
        if ok:
            _log({"ok": True, "status": r.status_code})
            print("✅ Pushbullet 전송 성공")
            return True
        else:
            # 응답 본문은 토큰 포함 가능성 거의 없지만, 혹시 몰라 길이만 기록
            _log({"ok": False, "status": r.status_code, "resp_len": len(r.text or "")})
            print(f"❌ Pushbullet 전송 실패: {r.status_code}")
            return False
    except Exception as e:
        _log({"ok": False, "exception": str(e)})
        print(f"❌ Pushbullet 예외 발생: {e}")
        return False

if __name__ == "__main__":
    # 간단 수동 테스트: 파이프 입력 없이 실행하면 더미 제목/본문 전송
    import sys
    title = "VELOS 테스트" if len(sys.argv) < 2 else sys.argv[1]
    body  = "Pushbullet 통합 점검" if len(sys.argv) < 3 else " ".join(sys.argv[2:])
    send_pushbullet_notification(title, body)
