from dotenv import load_dotenv
load_dotenv()
# -*- coding: utf-8 -*-
"""
VELOS 운영 철학 선언문
- 파일명은 절대 변경하지 않는다.
- 제공 전 실행/결과를 자체 검증한다.
- 경로 기준은 C:/giwanos 구조를 따른다.
- 판단과 기억은 지속 저장·반영하며, 실패/예외는 기록 후 개선한다.
"""
import os, smtplib, ssl, json, base64, datetime
from pathlib import Path
from email.message import EmailMessage

ROOT = Path(r"C:/giwanos")
LOG_DIR = ROOT / "data/logs"
LOG_DIR.mkdir(parents=True, exist_ok=True)
MAIL_LOG = LOG_DIR / "mail_log.jsonl"

def _log(event: dict):
    event = {"ts": datetime.datetime.now().isoformat(), **event}
    with open(MAIL_LOG, "a", encoding="utf-8") as f:
        f.write(json.dumps(event, ensure_ascii=False) + "\n")

def _load_env():
    # 우선순위: 환경변수 > configs/.env (KEY=VALUE)
    env = dict(os.environ)
    dotenv = ROOT / "configs/.env"
    if dotenv.exists():
        for line in dotenv.read_text(encoding="utf-8", errors="ignore").splitlines():
            line=line.strip()
            if not line or line.startswith("#") or "=" not in line: 
                continue
            k,v = line.split("=",1)
            env.setdefault(k.strip(), v.strip())
    return {
        "HOST": env.get("SMTP_HOST",""),
        "PORT": int(env.get("SMTP_PORT","465") or 465),
        "USER": env.get("SMTP_USER",""),
        "PW":   env.get("SMTP_PASSWORD",""),
        "FROM": env.get("SMTP_FROM", env.get("SMTP_USER","")),
        "TO":   env.get("SMTP_TO",""),
        "USE_SSL": (env.get("SMTP_USE_SSL","1") in ("1","true","True")),
    }

def _is_ascii(s: str) -> bool:
    try:
        s.encode("ascii")
        return True
    except Exception:
        return False

def _smtp():
    """
    컨텍스트 매니저: 
    - VELOS_CHECK_MODE=1 이면 더미 SMTP 반환(전송 스킵).
    - 비ASCII 자격증명 탐지 시 안전 스킵(명시 로그).
    """
    cfg = _load_env()
    check_mode = os.getenv("VELOS_CHECK_MODE") == "1"

    class _Dummy:
        def __enter__(self): 
            _log({"event":"smtp_dummy_enter","reason":"VELOS_CHECK_MODE"})
            return self
        def __exit__(self, *a):
            _log({"event":"smtp_dummy_exit"})
        def send_message(self, msg):
            _log({"event":"smtp_dummy_send", "subject": msg.get("Subject","")})
            return True

    # 체크 모드면 실제 발송 스킵
    if check_mode:
        return _Dummy()

    # 비ASCII 자격증명은 smtplib.login에서 UnicodeEncodeError 발생 → 사전 차단
    if not _is_ascii(cfg["USER"]) or not _is_ascii(cfg["PW"]):
        _log({
            "event":"smtp_skip_nonascii_credentials",
            "user_ascii": _is_ascii(cfg["USER"]),
            "pw_ascii": _is_ascii(cfg["PW"])
        })
        # 더미 동작으로 대체 (루프 중단 방지)
        return _Dummy()

    # 실 SMTP 연결
    context = ssl.create_default_context()
    if cfg["USE_SSL"]:
        s = smtplib.SMTP_SSL(cfg["HOST"], cfg["PORT"], context=context, timeout=30)
    else:
        s = smtplib.SMTP(cfg["HOST"], cfg["PORT"], timeout=30)
        s.ehlo()
        s.starttls(context=context)
    s.login(cfg["USER"], cfg["PW"])
    class _Wrap:
        def __enter__(self): 
            return s
        def __exit__(self, exc_type, exc, tb):
            try: s.quit()
            except Exception: 
                try: s.close()
                except Exception: pass
    return _Wrap()

def send_report_email(pdf_report_path: str, subject: str|None=None, body: str|None=None) -> bool:
    """
    기존 호출부 호환: send_report_email(pdf_report_path)
    - VELOS_CHECK_MODE=1 또는 비ASCII 자격증명 → 실제 발송 스킵, 성공으로 간주(log 기록)
    - 정상 환경 → SMTP 전송 시도
    """
    cfg = _load_env()
    pdf = Path(pdf_report_path) if pdf_report_path else None
    subject = subject or "[VELOS] 주간 보고서"
    body = body or "VELOS 자동 생성 보고서입니다."

    msg = EmailMessage()
    msg["Subject"] = subject
    msg["From"] = cfg["FROM"] or cfg["USER"]
    msg["To"] = cfg["TO"] or cfg["USER"]
    msg.set_content(body)

    if pdf and pdf.exists():
        data = pdf.read_bytes()
        msg.add_attachment(data, maintype="application", subtype="pdf", filename=pdf.name)
    else:
        _log({"event":"attach_skip","reason":"no_pdf","path": str(pdf)})

    try:
        with _smtp() as s:
            # 더미일 수도 있음(체크모드/비ASCII) → 동일 인터페이스
            s.send_message(msg)
            _log({"event":"mail_sent", "to": msg["To"], "subject": subject})
            return True
    except Exception as e:
        _log({"event":"mail_error", "error": str(e)})
        return False

# 자가검증(로컬)
def _selftest():
    os.environ["VELOS_CHECK_MODE"] = "1"
    dummy_pdf = ROOT / "data/reports/_dummy.pdf"
    dummy_pdf.parent.mkdir(parents=True, exist_ok=True)
    if not dummy_pdf.exists():
        dummy_pdf.write_bytes(b"%PDF-1.4\n% DUMMY\n")
    ok = send_report_email(str(dummy_pdf), subject="[VELOS] SELFTEST", body="selftest")
    print("SELFTEST:", "OK" if ok else "FAIL", "LOG=>", MAIL_LOG)
    return ok

if __name__ == "__main__":
    _selftest()

