# [ACTIVE] VELOS 운영 철학 선언문
# =========================================================
# 1) 파일명 고정: 시스템 파일명·경로·구조는 고정, 임의 변경 금지
# 2) 자가 검증 필수: 수정/배포 전 자동·수동 테스트를 통과해야 함
# 3) 실행 결과 직접 테스트: 코드 제공 시 실행 결과를 동봉/기록
# 4) 저장 경로 고정: ROOT=C:/giwanos 기준, 우회/추측 경로 금지
# 5) 실패 기록·회고: 실패 로그를 남기고 후속 커밋/문서에 반영
# 6) 기억 반영: 작업/대화 맥락을 메모리에 저장하고 로딩에 사용
# 7) 구조 기반 판단: 프로젝트 구조 기준으로만 판단 (추측 금지)
# 8) 중복/오류 제거: 불필요/중복 로직 제거, 단일 진실원칙 유지
# 9) 지능형 처리: 자동 복구·경고 등 방어적 설계 우선
# 10) 거짓 코드 절대 불가: 실행 불가·미검증·허위 출력 일체 금지
# =========================================================
import os
import sys
import json
import time
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, Any, List

ROOT = os.getenv("VELOS_ROOT", "/workspace")
if ROOT not in sys.path:
    sys.path.append(ROOT)

def get_system_stats() -> Dict[str, Any]:
    """시스템 통계 수집"""
    try:
        # 메모리 통계
        memory_stats = {"error": "memory_adapter_not_available"}
        try:
            from modules.core.memory_adapter import MemoryAdapter
            adapter = MemoryAdapter()
            memory_stats = adapter.get_stats()
        except Exception as e:
            memory_stats = {"error": str(e)}

        # 헬스 로그 읽기
        health_log = {}
        health_path = os.path.join(ROOT, "data", "logs", "system_health.json")
        if os.path.exists(health_path):
            try:
                with open(health_path, "r", encoding="utf-8") as f:
                    health_log = json.load(f)
            except Exception as e:
                health_log = {"error": str(e)}

        # 최근 스냅샷 확인
        snapshots = []
        snapshots_dir = os.path.join(ROOT, "data", "snapshots")
        if os.path.exists(snapshots_dir):
            try:
                for item in os.listdir(snapshots_dir):
                    if item.startswith("snapshot_"):
                        snapshots.append(item)
                snapshots.sort(reverse=True)
            except Exception as e:
                snapshots = [f"error: {e}"]

        return {
            "memory_stats": memory_stats,
            "health_log": health_log,
            "recent_snapshots": snapshots[:5],  # 최근 5개만
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {"error": str(e)}

def generate_markdown_report(stats: Dict[str, Any]) -> str:
    """Markdown 형식 보고서 생성"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    report_lines = [
        f"# VELOS System Report - {timestamp}",
        "",
        "## 📊 System Statistics",
        ""
    ]

    # 메모리 통계
    if "memory_stats" in stats:
        mem_stats = stats["memory_stats"]
        if "error" not in mem_stats:
            report_lines.extend([
                "### Memory Status",
                f"- Buffer Size: {mem_stats.get('buffer_size', 'N/A')}",
                f"- DB Records: {mem_stats.get('db_records', 'N/A')}",
                f"- JSON Records: {mem_stats.get('json_records', 'N/A')}",
                ""
            ])
        else:
            report_lines.extend([
                "### Memory Status",
                f"- Error: {mem_stats['error']}",
                ""
            ])

    # 헬스 로그
    if "health_log" in stats:
        health = stats["health_log"]
        if "error" not in health:
            report_lines.extend([
                "### Health Status",
                f"- System Integrity: {health.get('system_integrity_ok', 'Unknown')}",
                f"- Data Integrity: {health.get('data_integrity_ok', 'Unknown')}",
                ""
            ])
        else:
            report_lines.extend([
                "### Health Status",
                f"- Error: {health['error']}",
                ""
            ])

    # 스냅샷 정보
    if "recent_snapshots" in stats:
        snapshots = stats["recent_snapshots"]
        report_lines.extend([
            "### Recent Snapshots",
        ])
        if snapshots:
            for snapshot in snapshots:
                report_lines.append(f"- {snapshot}")
        else:
            report_lines.append("- No snapshots found")
        report_lines.append("")

    # 생성 정보
    report_lines.extend([
        "---",
        f"*Generated by VELOS Report Generator at {timestamp}*",
        "*Based on VELOS Operating Philosophy*"
    ])

    return "\n".join(report_lines)

def save_report(report_content: str) -> Dict[str, Any]:
    """보고서 저장"""
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"velos_report_{timestamp}.md"
        report_path = os.path.join(ROOT, "data", "reports", report_filename)

        # 디렉토리 생성
        os.makedirs(os.path.dirname(report_path), exist_ok=True)

        # 파일 저장
        with open(report_path, "w", encoding="utf-8") as f:
            f.write(report_content)

        return {
            "success": True,
            "report_path": report_path,
            "filename": report_filename
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

def main():
    print("=== VELOS Report Generator ===")

    # 시스템 통계 수집
    print("📊 Collecting system statistics...")
    stats = get_system_stats()

    # 보고서 생성
    print("📝 Generating report...")
    report_content = generate_markdown_report(stats)

    # 보고서 저장
    print("💾 Saving report...")
    save_result = save_report(report_content)

    if save_result["success"]:
        print(f"✅ Report generated successfully")
        print(f"📁 Location: {save_result['report_path']}")
        print(f"📄 Filename: {save_result['filename']}")

        # 결과를 JSON으로 출력
        result = {
            "success": True,
            "report_path": save_result["report_path"],
            "filename": save_result["filename"],
            "stats": stats
        }
        print(json.dumps(result, ensure_ascii=False, indent=2))
        sys.exit(0)
    else:
        print(f"❌ Report generation failed: {save_result['error']}")
        sys.exit(1)

if __name__ == "__main__":
    main()
